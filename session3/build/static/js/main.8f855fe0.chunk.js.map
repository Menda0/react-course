{"version":3,"sources":["components/Job.js","store/reducers/SearchReducer.js","store/actions/SearchActions.js","containers/JobList.js","store/actions/JobsActions.js","containers/SearchJob.js","containers/JobDetail.js","store/actions/JobActions.js","App.js","serviceWorker.js","store/reducers/JobsReducer.js","store/reducers/JobReducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["styles","container","padding","margin","border","display","logo","maxWidth","Job","job","style","company_logo","src","title","href","company_url","company","type","location","id","initialState","SearchReducer","state","action","newState","description","width","JobList","dispatch","useDispatch","jobs","useSelector","jobSearch","useEffect","url","encodeURI","proxyUrl","fetch","crossDomain","method","then","response","ok","json","loadJobs","catch","error","console","map","backgroundColor","input","SearchJob","useState","setLocation","setDescription","onSubmit","event","preventDefault","setSearch","name","value","onChange","target","JobDetail","jobId","useParams","loadJob","getJob","App","path","Boolean","window","hostname","match","JobsReducer","reducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","index","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f855fe0.chunk.js","sourcesContent":["import React from \"react\"\n\nconst Job = ({job}) => {\n    return (\n            <div style={styles.container}>\n                {job.company_logo && <img style={styles.logo} src={job.company_logo}/>}\n                <h3>{job.title}</h3>\n                <a href={job.company_url}><h5>{job.company}</h5></a>\n                <p>{job.type}</p>\n                <p>{job.location}</p>\n                <a href={`/jobs/${job.id}`}>Detail</a>\n            </div>\n    )\n};\n\nconst styles = {\n    container: {\n        padding: 20,\n        margin: 20,\n        border: \"1px solid #e1e1e1\",\n        display: \"inline-grid\",\n    },\n    logo: {\n        maxWidth: 200\n    }\n};\n\nexport default Job;\n","import {SET_DESCRIPTION, SET_LOCATION, SET_SEARCH} from \"../actions/SearchActions\";\n\nconst initialState = {\n    \"location\":\"\",\n    \"description\": \"\"\n};\n\nconst SearchReducer = (state = initialState, action) => {\n    const newState = {...state};\n    switch (action.type) {\n        case SET_DESCRIPTION:\n            newState.description = action.description;\n            return newState;\n        case SET_LOCATION:\n            newState.location = action.location;\n            return newState;\n        case SET_SEARCH:\n            newState.location = action.location;\n            newState.description = action.description;\n            return newState;\n        default:\n            return state\n    }\n};\n\nexport default SearchReducer\n","export const SET_LOCATION = \"SET_LOCATION\";\nexport const SET_DESCRIPTION = \"SET_DESCRIPTION\";\nexport const SET_SEARCH = \"SET_SEARCH\";\n\nexport const setLocation = (location) => ({type:SET_LOCATION, location});\nexport const setDescription = (description) => ({type:SET_DESCRIPTION, description});\nexport const setSearch = (location, description) => ({type:SET_SEARCH, location, description});\n","import React,{useEffect} from \"react\"\nimport jobsList from \"./jobs\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport Job from \"../components/Job\";\nimport {getJobs} from \"../store/actions/JobsActions\";\nimport jobSearch from \"../store/reducers/SearchReducer\";\n\nconst JobList = () => {\n\n    const dispatch = useDispatch();\n    const jobs = useSelector(state => state.jobs);\n    const jobSearch = useSelector(state => state.jobSearch);\n\n    useEffect(()=>{\n        dispatch(getJobs(jobSearch.location, jobSearch.description));\n    }, [jobSearch]);\n\n    return (\n        <div style={styles.container}>\n            {jobs.map((job)=> <Job job={job} />)}\n        </div>\n    );\n}\n\nconst styles = {\n    container: {\n        width: \"100%\",\n        display: \"grid\",\n        \"grid-template-columns\": \"auto auto auto auto auto\"\n    }\n};\n\nexport default JobList;\n","\nexport const LOAD_JOBS = \"LOAD_JOBS\";\n\nconst loadJobs = (jobs) => {\n    return {\n        type: LOAD_JOBS,\n        jobs\n    }\n};\n\nexport const getJobs = (location, description) => {\n    return (dispatch) => {\n        const url = `https://jobs.github.com/positions.json?description=${encodeURI(description)}&location=${encodeURI(location)}`;\n        const proxyUrl = `https://api.codetabs.com/v1/proxy?quest=${url}`;\n\n        fetch(proxyUrl, {\n                crossDomain: true,\n                method: 'GET'\n            }).then(function (response) {\n            if (response.ok) {\n                response.json().then(jobs => {\n                    dispatch(loadJobs(jobs));\n                })\n            }\n        }).catch(function (error) {\n            console.error(error)\n        })\n    }\n};\n","import React, {useState} from \"react\"\nimport {useDispatch} from \"react-redux\";\nimport {setSearch} from \"../store/actions/SearchActions\";\n\nconst SearchJob = () => {\n\n    const [location, setLocation] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const dispatch = useDispatch();\n\n    const handleChangeDescription = (event) => {\n        setDescription(event.target.value);\n    };\n\n    const handleChangeLocation = (event) => {\n        setLocation(event.target.value);\n    };\n\n    const handleSubmit = (event) => {\n        event.preventDefault();\n        dispatch(setSearch(location, description));\n    };\n\n    return (\n        <div style={styles.container}>\n            <form onSubmit={handleSubmit}>\n                <label style={styles.input}>\n                    Description:\n                    <input type=\"text\" name=\"description\" value={description}\n                           onChange={handleChangeDescription}/>\n                </label>\n                <label style={styles.input}>\n                    Location:\n                    <input type=\"text\" name=\"location\" value={location}\n                           onChange={handleChangeLocation}/>\n                </label>\n                <input type=\"submit\" value=\"Search\"/>\n            </form>\n        </div>\n    )\n};\n\nconst styles = {\n    container: {\n        width: \"100%\",\n        padding: 20,\n        backgroundColor: \"#e1e1e1\"\n    },\n    input: {\n        margin: 10\n    }\n};\n\nexport default SearchJob;\n","import React, {useEffect} from \"react\"\nimport {\n  useParams\n} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getJob} from \"../store/actions/JobActions\";\nimport Job from \"../components/Job\";\n\n\nconst JobDetail = () => {\n    let {jobId} = useParams();\n\n    const dispatch = useDispatch();\n    const job = useSelector(state => state.job);\n\n    useEffect(()=>dispatch(getJob(jobId)), [jobId]);\n\n    if(job == null){\n        return <h3>Loading job ...</h3>\n    }else{\n        return <div>\n            <Job job={job} />\n        </div>\n    }\n};\n\nexport default JobDetail;\n","export const LOAD_JOB = \"LOAD_JOB\";\n\nconst loadJob = (job) => ({type:LOAD_JOB, job});\n\nexport const getJob = (jobId) => {\n    return (dispatch) => {\n        const url = `https://jobs.github.com/positions/${jobId}.json`;\n        const proxyUrl = `https://api.codetabs.com/v1/proxy?quest=${url}`;\n\n        fetch(proxyUrl, {\n                crossDomain: true,\n                method: 'GET'\n            }).then(function (response) {\n            if (response.ok) {\n                response.json().then(job => {\n                    dispatch(loadJob(job));\n                })\n            }\n        }).catch(function (error) {\n            console.error(error)\n        })\n    }\n};\n","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport JobList from \"./containers/JobList\";\nimport SearchJob from \"./containers/SearchJob\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route\n} from \"react-router-dom\";\nimport JobDetail from \"./containers/JobDetail\";\n\nconst App = () => {\n    return (\n        <div>\n            <Router>\n                <SearchJob/>\n                <Switch>\n                    <Route path=\"/jobs/:jobId\">\n                        <JobDetail/>\n                    </Route>\n                    <Route path=\"/jobs\">\n                        <JobList/>\n                    </Route>\n                    <Route path=\"/\" >\n                        <JobList/>\n                    </Route>\n                </Switch>\n            </Router>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {LOAD_JOBS} from \"../actions/JobsActions\";\n\nconst initialState = [];\n\nconst JobsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD_JOBS:\n            return action.jobs;\n        default:\n            return state\n    }\n};\n\nexport default JobsReducer\n","import {LOAD_JOB} from \"../actions/JobActions\";\n\nconst initialState = null;\n\nconst JobsReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case LOAD_JOB:\n            return action.job;\n        default:\n            return state\n    }\n};\n\nexport default JobsReducer\n","import { combineReducers } from 'redux'\nimport jobs from \"./JobsReducer\";\nimport job from \"./JobReducer\";\nimport jobSearch from \"./SearchReducer\";\n\nconst reducers = combineReducers({\n    job,\n    jobs,\n    jobSearch\n});\n\nexport default reducers;\n","import { createStore, applyMiddleware } from 'redux'\nimport reducers from './reducers'\nimport thunk from 'redux-thunk';\n\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport index from \"./store\";\n\nReactDOM.render(<Provider store={index}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}